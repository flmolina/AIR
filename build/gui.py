
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import numpy as np
import threading
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Button, PhotoImage, Label
import tkinter as tk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random
import time
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\LUIS\Documents\GitHub\RNPF\build\assets\frame0")

def actualizar_etiqueta_atributos(A,B,C,D,E,F,G,H,I,J,K,L):
        textos=[A,B,C,D,E,F,G,H,I,J,K,L]
        for i in range(0,12):
                nuevo_texto = textos[i]
                Labels[i].config(text=str(nuevo_texto))

def catch():
        
         while(1):
            A=random.randint(1,10)  
            B=random.randint(1,10)  
            C=random.randint(1,10)  
            D=random.randint(1,10)  
            E=random.randint(1,10)  
            F=random.randint(1,10)  
            G=random.randint(0,1)
            H=random.randint(110,120)*-1
            I=random.randint(110,120)
            J=random.randint(60,70)*-1
            K=random.randint(30,40)
            L=random.randint(80,90)
            Angulos=[G,H,I,J,K,L]
            global Angulos_globales
            Angulos_globales=Angulos
            actualizar_etiqueta_atributos(A,B,C,D,E,F,G,H,I,J,K,L)
            #actualizar_grafica(G,H,I,J,K,L)
# Función para graficar un fasor en coordenadas polares con una flecha
def graficar_fasor_polar_arrow(ax, angulo, color):
    magnitud = 1  # Magnitud fija
    ax.plot([angulo], [magnitud], color=color)
    ax.annotate('', xy=(angulo, magnitud), xytext=(0, 0),
                 arrowprops=dict(facecolor=color, shrink=0.005,width=1.8,headwidth=7))

# Función para graficar los fasores
def graficar_fasores(ax,angulos_grados):
    ax.clear()
    ax.set_theta_direction(-1)  # Sentido horarioc
    #ax.set_theta_zero_location('N')  # Norte arriba

    # Convertir ángulos de grados a radianes
    angulos_radianes = np.radians(angulos_grados)

    # Colores de los fasores


    # Graficar cada fasor con una flecha
    for i, angulo in enumerate(angulos_radianes):
           

        graficar_fasor_polar_arrow(ax, angulo, colores[i])
    canvas.draw()
    canvas.flush_events()

colores = ['k','r','c' ,'g', 'y','b','m']
# Función para actualizar los ángulos y la gráfica
def actualizar_grafica():
    while(1):    
        global Angulos_globales
        angulos_grados=Angulos_globales
        # Generar nuevos ángulos aleatorios para los fasores
        # Actualizar la gráfica con los nuevos ángulos
        graficar_fasores(ax, angulos_grados)
        # Programar la próxima actualización después de 2 segundos (2000 milisegundos)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def close_window():
    window.quit()
    window.destroy()

window = Tk()

window.geometry("1024x600")
window.configure(bg = "#212E4D")
canvas = Canvas(
    window,
    bg = "#212E4D",
    height = 600,
    width = 1024,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    39.0,
    60.0,
    985.0,
    540.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    39.0,
    24.0,
    anchor="nw",
    text="Phasor",
    fill="#D9D9D9",
    font=("Inter", 30 * -1)
)

canvas.create_text(
    641.0,
    113.0,
    anchor="nw",
    text="VA",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    793.0,
    114.0,
    anchor="nw",
    text="V",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    789.0,
    443.0,
    anchor="nw",
    text="A",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    790.0,
    376.0,
    anchor="nw",
    text="A",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    791.0,
    309.0,
    anchor="nw",
    text="A",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    793.0,
    181.0,
    anchor="nw",
    text="V",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    792.0,
    243.0,
    anchor="nw",
    text="V",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    939.0,
    114.0,
    anchor="nw",
    text="°",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    935.0,
    443.0,
    anchor="nw",
    text="°",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    936.0,
    376.0,
    anchor="nw",
    text="°",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    937.0,
    309.0,
    anchor="nw",
    text="°",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    939.0,
    181.0,
    anchor="nw",
    text="°",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    938.0,
    243.0,
    anchor="nw",
    text="°",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    641.0,
    180.0,
    anchor="nw",
    text="VB",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    640.0,
    242.0,
    anchor="nw",
    text="VC",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    639.0,
    307.0,
    anchor="nw",
    text="IA",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    641.0,
    372.0,
    anchor="nw",
    text="IB",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    641.0,
    439.0,
    anchor="nw",
    text="IB",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_rectangle(
    0.0,
    60.0,
    91.0,
    540.0,
    fill="#E8CA2A",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=0.0,
    y=60.0,
    width=91.0,
    height=91.0
)

canvas.create_rectangle(
    538.5,
    59.499969482421875,
    539.0000000000002,
    540.0374755859375,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    584.0,
    110.0,
    624.0,
    143.0,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    584.0,
    439.0,
    624.0,
    472.0,
    fill="#21F100",
    outline="")

canvas.create_rectangle(
    584.0,
    372.0,
    624.0,
    405.0,
    fill="#1650D9",
    outline="")

canvas.create_rectangle(
    584.0,
    305.0,
    624.0,
    338.0,
    fill="#E8CA2A",
    outline="")

canvas.create_rectangle(
    584.0,
    239.0,
    624.0,
    272.0,
    fill="#1DBB9E",
    outline="")

canvas.create_rectangle(
    584.0,
    177.0,
    624.0,
    210.0,
    fill="#CD0000",
    outline="")

canvas.create_rectangle(
    92.0,
    60.0,
    570.0,
    540.0,
    fill="#FFFFFF",
    outline="")


##Labels de magnitud en RMS
label_font = font=("Inter Light", 25 * -1)
label_0 =Label(canvas, text=str(100.25),font=label_font,bg="#D9D9D9")##VA
label_id_0 = canvas.create_window(740, 130, window=label_0, anchor="center")

label_1 =Label(canvas, text=str(100.25),font=label_font,bg="#D9D9D9")##VB
label_id_1 = canvas.create_window(740, 196, window=label_1, anchor="center")

label_2 =Label(canvas, text=str(100.25),font=label_font,bg="#D9D9D9")##VC
label_id_2 = canvas.create_window(740, 262, window=label_2, anchor="center")

label_3 =Label(canvas, text=str(100.25),font=label_font,bg="#D9D9D9")##IA
label_id_3 = canvas.create_window(740, 328, window=label_3, anchor="center")

label_4 =Label(canvas, text=str(100.25),font=label_font,bg="#D9D9D9")##IB
label_id_4 = canvas.create_window(740, 394, window=label_4, anchor="center")

label_5 =Label(canvas, text=str(100.25),font=label_font,bg="#D9D9D9")##IC
label_id_5 = canvas.create_window(740, 460, window=label_5, anchor="center")

##Labels de Angulos
label_6 =Label(canvas, text=str(120.22),font=label_font,bg="#D9D9D9")##VA
label_id_6 = canvas.create_window(895, 130, window=label_6, anchor="center")

label_7 =Label(canvas, text=str(120.22),font=label_font,bg="#D9D9D9")##VB
label_id_7 = canvas.create_window(895, 196, window=label_7, anchor="center")

label_8 =Label(canvas, text=str(120.22),font=label_font,bg="#D9D9D9")##VC
label_id_8 = canvas.create_window(895, 262 , window=label_8, anchor="center")

label_9 =Label(canvas, text=str(120.22),font=label_font,bg="#D9D9D9")##IA
label_id_9 = canvas.create_window(895,  328, window=label_9, anchor="center")

label_10=Label(canvas, text=str(120.22),font=label_font,bg="#D9D9D9")##IB
label_id_10 = canvas.create_window(895,  394, window=label_10, anchor="center")

label_11=Label(canvas, text=str(120.22),font=label_font,bg="#D9D9D9")##IB
label_id_11 = canvas.create_window(895,  460, window=label_11, anchor="center")

Labels= [label_0,label_1,label_2,label_3,label_4,label_5,label_6,label_7,
         label_8,label_9,label_10,label_11]


print(Labels)
x_pos, y_pos = 50, 50
width, height = 400, 400
# Crear el gráfico dentro de un rectángulo de dimensiones específicas
fig = plt.figure(figsize=(6, 6))  # Ajustar el tamaño de la figura aquí
ax = fig.add_subplot(111, polar=True)
canvas = FigureCanvasTkAgg(fig, master=window)
canvas.get_tk_widget().place(x=120, y=100, width=width, height=height)

# Inicializar la gráfica con ángulos aleatorios
angulos_iniciales = np.random.randint(0, 360, size=4)
graficar_fasores(ax, angulos_iniciales)


thread_catch=threading.Thread(target=catch)
thread_catch.daemon=True

thread_phasors=threading.Thread(target=actualizar_grafica)
thread_phasors.daemon=True

thread_catch.start()
thread_phasors.start()
window.protocol("WM_DELETE_WINDOW", close_window)
window.resizable(False, False)
window.mainloop()
